{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/elements/TextPath.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { TextPathAttributes } from \"../lib/attributes\";\nimport extractText from \"../lib/extract/extractText\";\nimport Shape from \"./Shape\";\nimport { textPathProps } from \"../lib/props\";\nimport extractProps from \"../lib/extract/extractProps\";\nimport TSpan from \"./TSpan\";\nvar idExpReg = /^#(.+)$/;\n\nvar _default = function (_Shape) {\n  _inherits(_default, _Shape);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          href = _this$props.href,\n          startOffset = _this$props.startOffset,\n          method = _this$props.method,\n          spacing = _this$props.spacing,\n          side = _this$props.side,\n          alignmentBaseline = _this$props.alignmentBaseline,\n          midLine = _this$props.midLine,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"href\", \"startOffset\", \"method\", \"spacing\", \"side\", \"alignmentBaseline\", \"midLine\"]);\n\n      var matched = href && href.match(idExpReg);\n      var match = matched && matched[1];\n\n      if (href && match) {\n        return React.createElement(RNSVGTextPath, _extends({\n          href: match,\n          startOffset: startOffset || 0,\n          method: method,\n          spacing: spacing,\n          side: side,\n          alignmentBaseline: alignmentBaseline,\n          midLine: midLine\n        }, extractProps(_objectSpread(_objectSpread({}, props), {}, {\n          x: null,\n          y: null\n        }), this), extractText({\n          children: children\n        }, true, TSpan), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      console.warn('Invalid `href` prop for `TextPath` element, expected a href like `\"#id\"`, but got: \"' + href + '\"');\n      return React.createElement(TSpan, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 16\n        }\n      }, children);\n    }\n  }]);\n\n  return _default;\n}(Shape);\n\n_default.displayName = \"TextPath\";\n_default.propTypes = textPathProps;\nexport { _default as default };\nvar RNSVGTextPath = requireNativeComponent(\"RNSVGTextPath\", null, {\n  nativeOnly: TextPathAttributes\n});","map":{"version":3,"sources":["/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/elements/TextPath.js"],"names":["React","requireNativeComponent","TextPathAttributes","extractText","Shape","textPathProps","extractProps","TSpan","idExpReg","props","children","href","startOffset","method","spacing","side","alignmentBaseline","midLine","matched","match","x","y","console","warn","displayName","propTypes","RNSVGTextPath","nativeOnly"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;SAESC,sB;AACT,SAASC,kBAAT;AACA,OAAOC,WAAP;AACA,OAAOC,KAAP;AACA,SAASC,aAAT;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;AAEA,IAAMC,QAAQ,GAAG,SAAjB;;;;;;;;;;;;;;;6BAOa;AAAA,wBAWD,KAAKC,KAXJ;AAAA,UAEDC,QAFC,eAEDA,QAFC;AAAA,UAGDC,IAHC,eAGDA,IAHC;AAAA,UAIDC,WAJC,eAIDA,WAJC;AAAA,UAKDC,MALC,eAKDA,MALC;AAAA,UAMDC,OANC,eAMDA,OANC;AAAA,UAODC,IAPC,eAODA,IAPC;AAAA,UAQDC,iBARC,eAQDA,iBARC;AAAA,UASDC,OATC,eASDA,OATC;AAAA,UAUER,KAVF;;AAYL,UAAMS,OAAO,GAAGP,IAAI,IAAIA,IAAI,CAACQ,KAAL,CAAWX,QAAX,CAAxB;AACA,UAAMW,KAAK,GAAGD,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAhC;;AACA,UAAIP,IAAI,IAAIQ,KAAZ,EAAmB;AACf,eACI,oBAAC,aAAD,WACQ;AACAR,UAAAA,IAAI,EAAEQ,KADN;AAEAP,UAAAA,WAAW,EAAEA,WAAW,IAAI,CAF5B;AAGAC,UAAAA,MAAM,EAANA,MAHA;AAIAC,UAAAA,OAAO,EAAPA,OAJA;AAKAC,UAAAA,IAAI,EAAJA,IALA;AAMAC,UAAAA,iBAAiB,EAAjBA,iBANA;AAOAC,UAAAA,OAAO,EAAPA;AAPA,SADR,EAUQX,YAAY,iCAELG,KAFK;AAGRW,UAAAA,CAAC,EAAE,IAHK;AAIRC,UAAAA,CAAC,EAAE;AAJK,YAMZ,IANY,CAVpB,EAkBQlB,WAAW,CACX;AACIO,UAAAA,QAAQ,EAARA;AADJ,SADW,EAIX,IAJW,EAKXH,KALW,CAlBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AA4BH;;AAEDe,MAAAA,OAAO,CAACC,IAAR,CACI,yFACIZ,IADJ,GAEI,GAHR;AAKA,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,QAAR,CAAP;AACH;;;;EAxDwBN,K;;SAClBoB,W,GAAc,U;SAEdC,S,GAAYpB,a;;AAwDvB,IAAMqB,aAAa,GAAGzB,sBAAsB,CAAC,eAAD,EAAkB,IAAlB,EAAwB;AAChE0B,EAAAA,UAAU,EAAEzB;AADoD,CAAxB,CAA5C","sourcesContent":["import React from \"react\";\n\nimport { requireNativeComponent } from \"react-native\";\nimport { TextPathAttributes } from \"../lib/attributes\";\nimport extractText from \"../lib/extract/extractText\";\nimport Shape from \"./Shape\";\nimport { textPathProps } from \"../lib/props\";\nimport extractProps from \"../lib/extract/extractProps\";\nimport TSpan from \"./TSpan\";\n\nconst idExpReg = /^#(.+)$/;\n\nexport default class extends Shape {\n    static displayName = \"TextPath\";\n\n    static propTypes = textPathProps;\n\n    render() {\n        const {\n            children,\n            href,\n            startOffset,\n            method,\n            spacing,\n            side,\n            alignmentBaseline,\n            midLine,\n            ...props\n        } = this.props;\n        const matched = href && href.match(idExpReg);\n        const match = matched && matched[1];\n        if (href && match) {\n            return (\n                <RNSVGTextPath\n                    {...{\n                        href: match,\n                        startOffset: startOffset || 0,\n                        method,\n                        spacing,\n                        side,\n                        alignmentBaseline,\n                        midLine,\n                    }}\n                    {...extractProps(\n                        {\n                            ...props,\n                            x: null,\n                            y: null,\n                        },\n                        this,\n                    )}\n                    {...extractText(\n                        {\n                            children,\n                        },\n                        true,\n                        TSpan,\n                    )}\n                />\n            );\n        }\n\n        console.warn(\n            'Invalid `href` prop for `TextPath` element, expected a href like `\"#id\"`, but got: \"' +\n                href +\n                '\"',\n        );\n        return <TSpan>{children}</TSpan>;\n    }\n}\n\nconst RNSVGTextPath = requireNativeComponent(\"RNSVGTextPath\", null, {\n    nativeOnly: TextPathAttributes,\n});\n"]},"metadata":{},"sourceType":"module"}
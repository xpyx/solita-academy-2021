{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/elements/Svg.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport extractResponder from \"../lib/extract/extractResponder\";\nimport extractViewBox from \"../lib/extract/extractViewBox\";\nimport { ViewBoxAttributes } from \"../lib/attributes\";\nimport { numberProp } from \"../lib/props\";\nimport Shape from \"./Shape\";\nimport G from \"./G\";\nvar RNSVGSvgViewManager = NativeModules.RNSVGSvgViewManager;\nvar id = 0;\nvar styles = StyleSheet.create({\n  svg: {\n    backgroundColor: \"transparent\",\n    borderWidth: 0\n  }\n});\n\nvar Svg = function (_Shape) {\n  _inherits(Svg, _Shape);\n\n  var _super = _createSuper(Svg);\n\n  function Svg() {\n    var _this;\n\n    _classCallCheck(this, Svg);\n\n    _this = _super.apply(this, arguments);\n\n    _this.measureInWindow = function () {\n      var _this$root;\n\n      (_this$root = _this.root).measureInWindow.apply(_this$root, arguments);\n    };\n\n    _this.measure = function () {\n      var _this$root2;\n\n      (_this$root2 = _this.root).measure.apply(_this$root2, arguments);\n    };\n\n    _this.measureLayout = function () {\n      var _this$root3;\n\n      (_this$root3 = _this.root).measureLayout.apply(_this$root3, arguments);\n    };\n\n    _this.setNativeProps = function (props) {\n      if (props.width) {\n        props.bbWidth = \"\" + props.width;\n      }\n\n      if (props.height) {\n        props.bbHeight = \"\" + props.height;\n      }\n\n      _this.root.setNativeProps(props);\n    };\n\n    _this.toDataURL = function (callback) {\n      callback && RNSVGSvgViewManager.toDataURL(findNodeHandle(_this.root), callback);\n    };\n\n    _this.id = ++id;\n    return _this;\n  }\n\n  _createClass(Svg, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          opacity = _this$props.opacity,\n          viewBox = _this$props.viewBox,\n          preserveAspectRatio = _this$props.preserveAspectRatio,\n          style = _this$props.style,\n          children = _this$props.children,\n          props = _objectWithoutProperties(_this$props, [\"opacity\", \"viewBox\", \"preserveAspectRatio\", \"style\", \"children\"]);\n\n      var stylesAndProps = _objectSpread(_objectSpread({}, style), props);\n\n      var color = stylesAndProps.color,\n          width = stylesAndProps.width,\n          height = stylesAndProps.height;\n      var dimensions;\n\n      if (width && height) {\n        dimensions = {\n          width: width[width.length - 1] === \"%\" ? width : +width,\n          height: height[height.length - 1] === \"%\" ? height : +height,\n          flex: 0\n        };\n      }\n\n      var w = \"\" + width;\n      var h = \"\" + height;\n      return React.createElement(NativeSvgView, _extends({}, props, {\n        bbWidth: w,\n        bbHeight: h,\n        tintColor: color\n      }, extractResponder(props, this), extractViewBox({\n        viewBox: viewBox,\n        preserveAspectRatio: preserveAspectRatio\n      }), {\n        ref: function ref(ele) {\n          _this2.root = ele;\n        },\n        style: [styles.svg, style, !isNaN(+opacity) && {\n          opacity: +opacity\n        }, dimensions],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }), React.createElement(G, _extends({\n        style: style\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      }), children));\n    }\n  }]);\n\n  return Svg;\n}(Shape);\n\nSvg.displayName = \"Svg\";\nSvg.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  color: PropTypes.string,\n  opacity: numberProp,\n  width: numberProp,\n  height: numberProp,\n  viewBox: PropTypes.string,\n  preserveAspectRatio: PropTypes.string,\n  style: PropTypes.shape(_objectSpread(_objectSpread({}, ViewPropTypes.style), {}, {\n    color: PropTypes.string\n  }))\n});\nSvg.defaultProps = {\n  preserveAspectRatio: \"xMidYMid meet\"\n};\nvar NativeSvgView = requireNativeComponent(\"RNSVGSvgView\", null, {\n  nativeOnly: _objectSpread(_objectSpread({}, ViewBoxAttributes), {}, {\n    width: true,\n    height: true,\n    bbwidth: true,\n    bbheight: true,\n    tintColor: true\n  })\n});\nexport default Svg;","map":{"version":3,"sources":["/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/elements/Svg.js"],"names":["React","PropTypes","ViewPropTypes","requireNativeComponent","extractResponder","extractViewBox","ViewBoxAttributes","numberProp","Shape","G","RNSVGSvgViewManager","NativeModules","id","styles","StyleSheet","create","svg","backgroundColor","borderWidth","Svg","arguments","measureInWindow","root","measure","measureLayout","setNativeProps","props","width","bbWidth","height","bbHeight","toDataURL","callback","findNodeHandle","opacity","viewBox","preserveAspectRatio","style","children","stylesAndProps","color","dimensions","length","flex","w","h","ele","isNaN","displayName","propTypes","string","shape","defaultProps","NativeSvgView","nativeOnly","bbwidth","bbheight","tintColor"],"mappings":"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","sourcesContent":["//noinspection JSUnresolvedVariable\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n    ViewPropTypes,\n    requireNativeComponent,\n    StyleSheet,\n    findNodeHandle,\n    NativeModules,\n} from \"react-native\";\nimport extractResponder from \"../lib/extract/extractResponder\";\nimport extractViewBox from \"../lib/extract/extractViewBox\";\nimport { ViewBoxAttributes } from \"../lib/attributes\";\nimport { numberProp } from \"../lib/props\";\nimport Shape from \"./Shape\";\nimport G from \"./G\";\n\n/** @namespace NativeModules.RNSVGSvgViewManager */\nconst RNSVGSvgViewManager = NativeModules.RNSVGSvgViewManager;\n\n// Svg - Root node of all Svg elements\nlet id = 0;\n\nconst styles = StyleSheet.create({\n    svg: {\n        backgroundColor: \"transparent\",\n        borderWidth: 0,\n    },\n});\n\nclass Svg extends Shape {\n    static displayName = \"Svg\";\n    static propTypes = {\n        ...ViewPropTypes,\n        color: PropTypes.string,\n        opacity: numberProp,\n        width: numberProp,\n        height: numberProp,\n        // more detail https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\n        viewBox: PropTypes.string,\n        preserveAspectRatio: PropTypes.string,\n        style: PropTypes.shape({\n            ...ViewPropTypes.style,\n            color: PropTypes.string,\n        }),\n    };\n\n    static defaultProps = {\n        preserveAspectRatio: \"xMidYMid meet\",\n    };\n\n    constructor() {\n        super(...arguments);\n        this.id = ++id;\n    }\n    measureInWindow = (...args) => {\n        this.root.measureInWindow(...args);\n    };\n\n    measure = (...args) => {\n        this.root.measure(...args);\n    };\n\n    measureLayout = (...args) => {\n        this.root.measureLayout(...args);\n    };\n\n    setNativeProps = props => {\n        if (props.width) {\n            props.bbWidth = `${props.width}`;\n        }\n        if (props.height) {\n            props.bbHeight = `${props.height}`;\n        }\n        this.root.setNativeProps(props);\n    };\n\n    toDataURL = callback => {\n        callback &&\n            RNSVGSvgViewManager.toDataURL(findNodeHandle(this.root), callback);\n    };\n\n    render() {\n        const {\n            opacity,\n            viewBox,\n            preserveAspectRatio,\n            style,\n            children,\n            ...props\n        } = this.props;\n        const stylesAndProps = { ...style, ...props };\n        const { color, width, height } = stylesAndProps;\n\n        let dimensions;\n        if (width && height) {\n            dimensions = {\n                width: width[width.length - 1] === \"%\" ? width : +width,\n                height: height[height.length - 1] === \"%\" ? height : +height,\n                flex: 0,\n            };\n        }\n\n        const w = `${width}`;\n        const h = `${height}`;\n\n        return (\n            <NativeSvgView\n                {...props}\n                bbWidth={w}\n                bbHeight={h}\n                tintColor={color}\n                {...extractResponder(props, this)}\n                {...extractViewBox({ viewBox, preserveAspectRatio })}\n                ref={ele => {\n                    this.root = ele;\n                }}\n                style={[\n                    styles.svg,\n                    style,\n                    !isNaN(+opacity) && {\n                        opacity: +opacity,\n                    },\n                    dimensions,\n                ]}\n            >\n                <G style={style} {...props}>\n                    {children}\n                </G>\n            </NativeSvgView>\n        );\n    }\n}\n\nconst NativeSvgView = requireNativeComponent(\"RNSVGSvgView\", null, {\n    nativeOnly: {\n        ...ViewBoxAttributes,\n        width: true,\n        height: true,\n        bbwidth: true,\n        bbheight: true,\n        tintColor: true,\n    },\n});\n\nexport default Svg;\n"]},"metadata":{},"sourceType":"module"}
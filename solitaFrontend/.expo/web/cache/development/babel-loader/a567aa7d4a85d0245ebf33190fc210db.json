{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/lib/extract/extractText.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _ from \"lodash\";\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\nvar fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nvar fontFamilyPrefix = /^[\\s\"']*/;\nvar fontFamilySuffix = /[\\s\"']*$/;\nvar commaReg = /\\s*,\\s*/g;\nvar cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n  return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, \"\").replace(fontFamilySuffix, \"\") : null;\n}\n\nfunction parseFontString(font) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n\n  var match = fontRegExp.exec(font);\n\n  if (!match) {\n    return null;\n  }\n\n  var fontFamily = extractSingleFontFamily(match[3]);\n  var fontSize = match[2] || \"12\";\n  var isBold = /bold/.exec(match[1]);\n  var isItalic = /italic/.exec(match[1]);\n  var fontWeight = isBold ? \"bold\" : \"normal\";\n  var fontStyle = isItalic ? \"italic\" : \"normal\";\n  cachedFontObjectsFromString[font] = {\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  };\n  return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n  var props = _objectSpread(_objectSpread({}, prop.style), prop);\n\n  var fontData = props.fontData,\n      fontStyle = props.fontStyle,\n      fontVariant = props.fontVariant,\n      fontWeight = props.fontWeight,\n      fontStretch = props.fontStretch,\n      textAnchor = props.textAnchor,\n      textDecoration = props.textDecoration,\n      letterSpacing = props.letterSpacing,\n      wordSpacing = props.wordSpacing,\n      kerning = props.kerning,\n      fontVariantLigatures = props.fontVariantLigatures,\n      fontFeatureSettings = props.fontFeatureSettings;\n  var fontSize = props.fontSize,\n      fontFamily = props.fontFamily,\n      font = props.font;\n  fontFamily = extractSingleFontFamily(fontFamily);\n  fontSize = fontSize ? \"\" + fontSize : null;\n\n  var ownedFont = _.pickBy({\n    fontData: fontData,\n    fontStyle: fontStyle,\n    fontVariant: fontVariant,\n    fontWeight: fontWeight,\n    fontStretch: fontStretch,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    textAnchor: textAnchor,\n    textDecoration: textDecoration,\n    letterSpacing: letterSpacing,\n    wordSpacing: wordSpacing,\n    kerning: kerning,\n    fontVariantLigatures: fontVariantLigatures,\n    fontFeatureSettings: fontFeatureSettings\n  }, function (p) {\n    return !_.isNil(p);\n  });\n\n  if (typeof font === \"string\") {\n    font = parseFontString(font);\n  }\n\n  return _.defaults(ownedFont, font);\n}\nexport default function (props) {\n  var _this = this;\n\n  var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var TSpan = arguments.length > 2 ? arguments[2] : undefined;\n  var x = props.x,\n      y = props.y,\n      dx = props.dx,\n      dy = props.dy,\n      rotate = props.rotate,\n      baselineShift = props.baselineShift,\n      verticalAlign = props.verticalAlign,\n      alignmentBaseline = props.alignmentBaseline;\n  var children = props.children;\n  var content = null;\n\n  if (typeof children === \"string\" || typeof children === \"number\") {\n    var childrenString = children.toString();\n\n    if (container) {\n      children = React.createElement(TSpan, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 24\n        }\n      }, childrenString);\n    } else {\n      content = childrenString;\n      children = null;\n    }\n  } else if (Children.count(children) > 1 || Array.isArray(children)) {\n    children = Children.map(children, function (child) {\n      if (typeof child === \"string\" || typeof child === \"number\") {\n        return React.createElement(TSpan, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 24\n          }\n        }, child.toString());\n      } else {\n        return child;\n      }\n    });\n  }\n\n  return {\n    content: content,\n    children: children,\n    baselineShift: baselineShift,\n    verticalAlign: verticalAlign,\n    alignmentBaseline: alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate)\n  };\n}","map":{"version":3,"sources":["/Users/xpyx/Code/projects/solita-academy-2021/solitaFrontend/node_modules/react-native-svg/lib/extract/extractText.js"],"names":["_","React","Children","extractLengthList","fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","extractFont","prop","props","style","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontVariantLigatures","fontFeatureSettings","ownedFont","pickBy","p","isNil","defaults","container","TSpan","x","y","dx","dy","rotate","baselineShift","verticalAlign","alignmentBaseline","children","content","childrenString","toString","count","Array","isArray","map","child"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\n//noinspection JSUnresolvedVariable\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString\n        ? fontFamilyString\n              .split(commaReg)[0]\n              .replace(fontFamilyPrefix, \"\")\n              .replace(fontFamilySuffix, \"\")\n        : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    const match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    const fontFamily = extractSingleFontFamily(match[3]);\n    const fontSize = match[2] || \"12\";\n    const isBold = /bold/.exec(match[1]);\n    const isItalic = /italic/.exec(match[1]);\n    const fontWeight = isBold ? \"bold\" : \"normal\";\n    const fontStyle = isItalic ? \"italic\" : \"normal\";\n    cachedFontObjectsFromString[font] = {\n        fontSize,\n        fontFamily,\n        fontWeight,\n        fontStyle,\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n    const props = { ...prop.style, ...prop };\n    const {\n        fontData,\n        fontStyle,\n        fontVariant,\n        fontWeight,\n        fontStretch,\n        textAnchor,\n        textDecoration,\n        letterSpacing,\n        wordSpacing,\n        kerning,\n        fontVariantLigatures,\n        fontFeatureSettings,\n    } = props;\n    let { fontSize, fontFamily, font } = props;\n\n    fontFamily = extractSingleFontFamily(fontFamily);\n    fontSize = fontSize ? \"\" + fontSize : null;\n\n    const ownedFont = _.pickBy(\n        {\n            fontData,\n            fontStyle,\n            fontVariant,\n            fontWeight,\n            fontStretch,\n            fontSize,\n            fontFamily,\n            textAnchor,\n            textDecoration,\n            letterSpacing,\n            wordSpacing,\n            kerning,\n            fontVariantLigatures,\n            fontFeatureSettings,\n        },\n        p => !_.isNil(p),\n    );\n\n    if (typeof font === \"string\") {\n        font = parseFontString(font);\n    }\n\n    return _.defaults(ownedFont, font);\n}\n\nexport default function(props, container = false, TSpan) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        rotate,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n    } = props;\n    let { children } = props;\n\n    let content = null;\n    if (typeof children === \"string\" || typeof children === \"number\") {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === \"string\" || typeof child === \"number\") {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        content,\n        children,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n        font: extractFont(props),\n        x: extractLengthList(x),\n        y: extractLengthList(y),\n        dx: extractLengthList(dx),\n        dy: extractLengthList(dy),\n        rotate: extractLengthList(rotate),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}